(set-info :original "/tmp/sea-wpUbwE/recHanoi02_true-unreach-call_true-no-overflow_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel hanoi@_call (Int ))
(declare-rel hanoi@.split (Int Int ))
(declare-rel hanoi (Bool Bool Bool Int Int ))
(declare-rel main@entry ())
(declare-rel main@verifier.error.split ())
(declare-var hanoi@%_4_0 Int )
(declare-var hanoi@%_5_0 Int )
(declare-var hanoi@%_6_0 Int )
(declare-var hanoi@%_br_0 Bool )
(declare-var hanoi@%.0_2 Int )
(declare-var hanoi@%n_0 Int )
(declare-var hanoi@%.0_0 Int )
(declare-var hanoi@_call_0 Bool )
(declare-var hanoi@_3_0 Bool )
(declare-var hanoi@%_br1_0 Int )
(declare-var hanoi@_.0_0 Bool )
(declare-var |tuple(hanoi@_call_0, hanoi@_.0_0)| Bool )
(declare-var hanoi@%.0_1 Int )
(declare-var hanoi@.split_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Bool )
(declare-var main@%.off.i_0 Int )
(declare-var main@%_1_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@_bb1_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (hanoi true true true hanoi@%n_0 hanoi@%.0_0))
(rule (hanoi false true true hanoi@%n_0 hanoi@%.0_0))
(rule (hanoi false false false hanoi@%n_0 hanoi@%.0_0))
(rule (hanoi@_call hanoi@%n_0))
(rule (let ((a!1 (and (hanoi@_call hanoi@%n_0)
                true
                (= hanoi@%_br_0 (= hanoi@%n_0 1))
                (=> hanoi@_3_0 (and hanoi@_3_0 hanoi@_call_0))
                (=> (and hanoi@_3_0 hanoi@_call_0) (not hanoi@%_br_0))
                (=> hanoi@_3_0 (= hanoi@%_4_0 (+ hanoi@%n_0 (- 1))))
                (hanoi hanoi@_3_0 false false hanoi@%_4_0 hanoi@%_5_0)
                (=> hanoi@_3_0 (= hanoi@%_6_0 (* hanoi@%_5_0 2)))
                (=> hanoi@_3_0 (= hanoi@%_br1_0 (+ hanoi@%_6_0 1)))
                (=> |tuple(hanoi@_call_0, hanoi@_.0_0)| hanoi@_call_0)
                (=> hanoi@_.0_0
                    (or (and hanoi@_.0_0 hanoi@_3_0)
                        (and hanoi@_call_0 |tuple(hanoi@_call_0, hanoi@_.0_0)|)))
                (=> (and hanoi@_.0_0 hanoi@_3_0) (= hanoi@%.0_0 hanoi@%_br1_0))
                (=> (and hanoi@_call_0 |tuple(hanoi@_call_0, hanoi@_.0_0)|)
                    hanoi@%_br_0)
                (=> (and hanoi@_call_0 |tuple(hanoi@_call_0, hanoi@_.0_0)|)
                    (= hanoi@%.0_1 1))
                (=> (and hanoi@_.0_0 hanoi@_3_0) (= hanoi@%.0_2 hanoi@%.0_0))
                (=> (and hanoi@_call_0 |tuple(hanoi@_call_0, hanoi@_.0_0)|)
                    (= hanoi@%.0_2 hanoi@%.0_1))
                (=> hanoi@.split_0 (and hanoi@.split_0 hanoi@_.0_0))
                hanoi@.split_0)))
  (=> a!1 (hanoi@.split hanoi@%.0_2 hanoi@%n_0))))
(rule (=> (hanoi@.split hanoi@%.0_0 hanoi@%n_0)
    (hanoi true false false hanoi@%n_0 hanoi@%.0_0)))
(rule main@entry)
(rule (let ((a!1 (and main@entry
                true
                (= main@%.off.i_0 (+ main@%_0_0 (- 1)))
                (= main@%_1_0
                   (ite (>= main@%.off.i_0 0) (< 30 main@%.off.i_0) true))
                (not main@%_1_0)
                (=> main@_bb_0 (and main@_bb_0 main@entry_0))
                (hanoi main@_bb_0 false false main@%_0_0 main@%_3_0)
                (=> main@_bb_0 (= main@%_4_0 (> main@%_3_0 (- 1))))
                (=> main@_bb_0 (not main@%_4_0))
                (=> main@_bb1_0 (and main@_bb1_0 main@_bb_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@_bb1_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(query main@verifier.error.split)

