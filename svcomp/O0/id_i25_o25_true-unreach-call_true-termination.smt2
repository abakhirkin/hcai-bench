(set-info :original "/tmp/sea-cMyrsr/id_i25_o25_true-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel id@_call (Int ))
(declare-rel id@.split (Int Int ))
(declare-rel id (Bool Bool Bool Int Int ))
(declare-rel main@entry ())
(declare-rel main@verifier.error.split ())
(declare-var id@%_4_0 Int )
(declare-var id@%_5_0 Int )
(declare-var id@%_br_0 Bool )
(declare-var id@%.0_2 Int )
(declare-var id@%x_0 Int )
(declare-var id@%.0_0 Int )
(declare-var id@_call_0 Bool )
(declare-var id@_3_0 Bool )
(declare-var id@%_br1_0 Int )
(declare-var id@_.0_0 Bool )
(declare-var |tuple(id@_call_0, id@_.0_0)| Bool )
(declare-var id@%.0_1 Int )
(declare-var id@.split_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@_bb_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (id true true true id@%x_0 id@%.0_0))
(rule (id false true true id@%x_0 id@%.0_0))
(rule (id false false false id@%x_0 id@%.0_0))
(rule (id@_call id@%x_0))
(rule (let ((a!1 (and (id@_call id@%x_0)
                true
                (= id@%_br_0 (= id@%x_0 0))
                (=> id@_3_0 (and id@_3_0 id@_call_0))
                (=> (and id@_3_0 id@_call_0) (not id@%_br_0))
                (=> id@_3_0 (= id@%_4_0 (+ id@%x_0 (- 1))))
                (id id@_3_0 false false id@%_4_0 id@%_5_0)
                (=> id@_3_0 (= id@%_br1_0 (+ id@%_5_0 1)))
                (=> |tuple(id@_call_0, id@_.0_0)| id@_call_0)
                (=> id@_.0_0
                    (or (and id@_.0_0 id@_3_0)
                        (and id@_call_0 |tuple(id@_call_0, id@_.0_0)|)))
                (=> (and id@_.0_0 id@_3_0) (= id@%.0_0 id@%_br1_0))
                (=> (and id@_call_0 |tuple(id@_call_0, id@_.0_0)|) id@%_br_0)
                (=> (and id@_call_0 |tuple(id@_call_0, id@_.0_0)|)
                    (= id@%.0_1 0))
                (=> (and id@_.0_0 id@_3_0) (= id@%.0_2 id@%.0_0))
                (=> (and id@_call_0 |tuple(id@_call_0, id@_.0_0)|)
                    (= id@%.0_2 id@%.0_1))
                (=> id@.split_0 (and id@.split_0 id@_.0_0))
                id@.split_0)))
  (=> a!1 (id@.split id@%.0_2 id@%x_0))))
(rule (=> (id@.split id@%.0_0 id@%x_0) (id true false false id@%x_0 id@%.0_0)))
(rule main@entry)
(rule (=> (and main@entry
         true
         (id true false false 25 main@%_0_0)
         (= main@%_1_0 (= main@%_0_0 25))
         (not main@%_1_0)
         (=> main@_bb_0 (and main@_bb_0 main@entry_0))
         (=> main@verifier.error_0 (and main@verifier.error_0 main@_bb_0))
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    main@verifier.error.split))
(query main@verifier.error.split)

