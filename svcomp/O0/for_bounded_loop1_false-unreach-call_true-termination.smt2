(set-info :original "/tmp/sea-feBD0b/for_bounded_loop1_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel __VERIFIER_assert@_call (Int ))
(declare-rel __VERIFIER_assert@_ret (Int ))
(declare-rel __VERIFIER_assert (Bool Bool Bool Int ))
(declare-rel main@entry (Int ))
(declare-rel main@_bb (Int Int Int Int Int ))
(declare-rel main@verifier.error.split ())
(declare-var __VERIFIER_assert@%_call1_0 Bool )
(declare-var __VERIFIER_assert@%cond_0 Int )
(declare-var __VERIFIER_assert@_call_0 Bool )
(declare-var __VERIFIER_assert@_ret_0 Bool )
(declare-var main@%_23_0 Bool )
(declare-var main@%_13_0 Int )
(declare-var main@%_15_0 Bool )
(declare-var main@%_17_0 Bool )
(declare-var main@%_9_0 Int )
(declare-var main@%_11_0 Bool )
(declare-var main@%_6_0 Bool )
(declare-var main@%_8_0 Bool )
(declare-var main@%.0_3 Int )
(declare-var main@%_20_0 Bool )
(declare-var main@%_22_0 Bool )
(declare-var main@%_4_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%_1_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@%y.0.i_0 Int )
(declare-var main@%x.0.i_0 Int )
(declare-var main@%i.0.i_0 Int )
(declare-var main@%y.0.i_1 Int )
(declare-var main@%x.0.i_1 Int )
(declare-var main@%i.0.i_1 Int )
(declare-var main@_bb1_0 Bool )
(declare-var main@%_7_0 Int )
(declare-var main@postcall_0 Bool )
(declare-var main@%_10_0 Int )
(declare-var main@_bb2_0 Bool )
(declare-var main@%_14_0 Int )
(declare-var main@%_16_0 Int )
(declare-var main@postcall1_0 Bool )
(declare-var main@%_18_0 Int )
(declare-var main@_bb_1 Bool )
(declare-var main@%y.0.i_2 Int )
(declare-var main@%x.0.i_2 Int )
(declare-var main@%i.0.i_2 Int )
(declare-var main@_bb3_0 Bool )
(declare-var main@%_21_0 Int )
(declare-var main@precall4_0 Bool )
(declare-var main@precall_0 Bool )
(declare-var main@precall2_0 Bool )
(declare-var main@__VERIFIER_assert_0 Bool )
(declare-var main@%.0_0 Int )
(declare-var main@%.0_1 Int )
(declare-var main@%.0_2 Int )
(declare-var main@_bb4_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (__VERIFIER_assert true true true __VERIFIER_assert@%cond_0))
(rule (__VERIFIER_assert false true true __VERIFIER_assert@%cond_0))
(rule (__VERIFIER_assert false false false __VERIFIER_assert@%cond_0))
(rule (__VERIFIER_assert@_call __VERIFIER_assert@%cond_0))
(rule (=> (and (__VERIFIER_assert@_call __VERIFIER_assert@%cond_0)
         true
         (= __VERIFIER_assert@%_call1_0 (= __VERIFIER_assert@%cond_0 0))
         (not __VERIFIER_assert@%_call1_0)
         (=> __VERIFIER_assert@_ret_0
             (and __VERIFIER_assert@_ret_0 __VERIFIER_assert@_call_0))
         __VERIFIER_assert@_ret_0)
    (__VERIFIER_assert@_ret __VERIFIER_assert@%cond_0)))
(rule (=> (__VERIFIER_assert@_ret __VERIFIER_assert@%cond_0)
    (__VERIFIER_assert true false false __VERIFIER_assert@%cond_0)))
(rule (main@entry @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (> main@%_1_0 0))
         main@%_2_0
         (=> main@_bb_0 (and main@_bb_0 main@entry_0))
         main@_bb_0
         (=> (and main@_bb_0 main@entry_0) (= main@%y.0.i_0 0))
         (=> (and main@_bb_0 main@entry_0) (= main@%x.0.i_0 0))
         (=> (and main@_bb_0 main@entry_0) (= main@%i.0.i_0 0))
         (=> (and main@_bb_0 main@entry_0) (= main@%y.0.i_1 main@%y.0.i_0))
         (=> (and main@_bb_0 main@entry_0) (= main@%x.0.i_1 main@%x.0.i_0))
         (=> (and main@_bb_0 main@entry_0) (= main@%i.0.i_1 main@%i.0.i_0)))
    (main@_bb main@%i.0.i_1
              main@%y.0.i_1
              main@%x.0.i_1
              @__VERIFIER_nondet_int_0
              main@%_1_0)))
(rule (let ((a!1 (=> main@_bb2_0 (= main@%_15_0 (not (= main@%_14_0 0))))))
(let ((a!2 (and (main@_bb main@%i.0.i_0
                          main@%y.0.i_0
                          main@%x.0.i_0
                          @__VERIFIER_nondet_int_0
                          main@%_1_0)
                true
                (= main@%_4_0 (< main@%i.0.i_0 main@%_1_0))
                (=> main@_bb1_0 (and main@_bb1_0 main@_bb_0))
                (=> (and main@_bb1_0 main@_bb_0) main@%_4_0)
                (=> main@_bb1_0 (= main@%_6_0 (= main@%x.0.i_0 main@%y.0.i_0)))
                (=> main@_bb1_0 (= main@%_7_0 (ite main@%_6_0 1 0)))
                (=> main@postcall_0 (and main@postcall_0 main@_bb1_0))
                (=> (and main@postcall_0 main@_bb1_0) main@%_8_0)
                (__VERIFIER_assert main@postcall_0 false false main@%_7_0)
                (=> main@postcall_0 (= main@%_9_0 @__VERIFIER_nondet_int_0))
                (=> main@postcall_0 (= main@%_11_0 (= main@%_10_0 0)))
                (=> main@postcall_0 (not main@%_11_0))
                (=> main@_bb2_0 (and main@_bb2_0 main@postcall_0))
                (=> main@_bb2_0 (= main@%_13_0 (- main@%x.0.i_0 main@%y.0.i_0)))
                (=> main@_bb2_0 (= main@%_14_0 (+ main@%_13_0 main@%_10_0)))
                a!1
                (=> main@_bb2_0 (= main@%_16_0 (ite main@%_15_0 1 0)))
                (=> main@postcall1_0 (and main@postcall1_0 main@_bb2_0))
                (=> (and main@postcall1_0 main@_bb2_0) main@%_17_0)
                (__VERIFIER_assert main@postcall1_0 false false main@%_16_0)
                (=> main@postcall1_0 (= main@%_18_0 (+ main@%i.0.i_0 1)))
                (=> main@_bb_1 (and main@_bb_1 main@postcall1_0))
                main@_bb_1
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%y.0.i_1 main@%_10_0))
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%x.0.i_1 main@%_14_0))
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%i.0.i_1 main@%_18_0))
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%y.0.i_2 main@%y.0.i_1))
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%x.0.i_2 main@%x.0.i_1))
                (=> (and main@_bb_1 main@postcall1_0)
                    (= main@%i.0.i_2 main@%i.0.i_1)))))
  (=> a!2
      (main@_bb main@%i.0.i_2
                main@%y.0.i_2
                main@%x.0.i_2
                @__VERIFIER_nondet_int_0
                main@%_1_0)))))
(rule (let ((a!1 (=> main@_bb2_0 (= main@%_15_0 (not (= main@%_14_0 0))))))
(let ((a!2 (and (main@_bb main@%i.0.i_0
                          main@%y.0.i_0
                          main@%x.0.i_0
                          @__VERIFIER_nondet_int_0
                          main@%_1_0)
                true
                (= main@%_4_0 (< main@%i.0.i_0 main@%_1_0))
                (=> main@_bb3_0 (and main@_bb3_0 main@_bb_0))
                (=> (and main@_bb3_0 main@_bb_0) (not main@%_4_0))
                (=> main@_bb3_0 (= main@%_20_0 (= main@%x.0.i_0 0)))
                (=> main@_bb3_0 (= main@%_21_0 (ite main@%_20_0 1 0)))
                (=> main@_bb3_0 (not main@%_22_0))
                (=> main@precall4_0 (and main@precall4_0 main@_bb3_0))
                (=> main@_bb1_0 (and main@_bb1_0 main@_bb_0))
                (=> (and main@_bb1_0 main@_bb_0) main@%_4_0)
                (=> main@_bb1_0 (= main@%_6_0 (= main@%x.0.i_0 main@%y.0.i_0)))
                (=> main@_bb1_0 (= main@%_7_0 (ite main@%_6_0 1 0)))
                (=> main@precall_0 (and main@precall_0 main@_bb1_0))
                (=> (and main@precall_0 main@_bb1_0) (not main@%_8_0))
                (=> main@postcall_0 (and main@postcall_0 main@_bb1_0))
                (=> (and main@postcall_0 main@_bb1_0) main@%_8_0)
                (__VERIFIER_assert main@postcall_0 false false main@%_7_0)
                (=> main@postcall_0 (= main@%_9_0 @__VERIFIER_nondet_int_0))
                (=> main@postcall_0 (= main@%_11_0 (= main@%_10_0 0)))
                (=> main@postcall_0 (not main@%_11_0))
                (=> main@_bb2_0 (and main@_bb2_0 main@postcall_0))
                (=> main@_bb2_0 (= main@%_13_0 (- main@%x.0.i_0 main@%y.0.i_0)))
                (=> main@_bb2_0 (= main@%_14_0 (+ main@%_13_0 main@%_10_0)))
                a!1
                (=> main@_bb2_0 (= main@%_16_0 (ite main@%_15_0 1 0)))
                (=> main@precall2_0 (and main@precall2_0 main@_bb2_0))
                (=> (and main@precall2_0 main@_bb2_0) (not main@%_17_0))
                (=> main@__VERIFIER_assert_0
                    (or (and main@__VERIFIER_assert_0 main@precall4_0)
                        (and main@__VERIFIER_assert_0 main@precall2_0)
                        (and main@__VERIFIER_assert_0 main@precall_0)))
                (=> (and main@__VERIFIER_assert_0 main@precall4_0)
                    (= main@%.0_0 main@%_21_0))
                (=> (and main@__VERIFIER_assert_0 main@precall2_0)
                    (= main@%.0_1 main@%_16_0))
                (=> (and main@__VERIFIER_assert_0 main@precall_0)
                    (= main@%.0_2 main@%_7_0))
                (=> (and main@__VERIFIER_assert_0 main@precall4_0)
                    (= main@%.0_3 main@%.0_0))
                (=> (and main@__VERIFIER_assert_0 main@precall2_0)
                    (= main@%.0_3 main@%.0_1))
                (=> (and main@__VERIFIER_assert_0 main@precall_0)
                    (= main@%.0_3 main@%.0_2))
                (=> main@__VERIFIER_assert_0 (= main@%_23_0 (= main@%.0_3 0)))
                (=> main@__VERIFIER_assert_0 main@%_23_0)
                (=> main@_bb4_0 (and main@_bb4_0 main@__VERIFIER_assert_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@_bb4_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!2 main@verifier.error.split))))
(query main@verifier.error.split)

