(set-info :original "/tmp/sea-vJxzrE/gcd02_true-unreach-call_true-no-overflow_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel gcd@_call (Int Int ))
(declare-rel gcd@.split (Int Int Int ))
(declare-rel gcd (Bool Bool Bool Int Int Int ))
(declare-rel divides@_call (Int Int ))
(declare-rel divides@.split (Int Int Int ))
(declare-rel divides (Bool Bool Bool Int Int Int ))
(declare-rel main@entry ())
(declare-rel main@gcd (Int Int ))
(declare-rel main@verifier.error.split ())
(declare-var gcd@%_9_0 Int )
(declare-var gcd@%_12_0 Int )
(declare-var gcd@%_br1_0 Bool )
(declare-var gcd@%_br_0 Bool )
(declare-var gcd@%.0_3 Int )
(declare-var gcd@%_2_0 Bool )
(declare-var gcd@%_or.cond_0 Bool )
(declare-var gcd@%or.cond_0 Bool )
(declare-var gcd@%y1_0 Int )
(declare-var gcd@%y2_0 Int )
(declare-var gcd@%.0_0 Int )
(declare-var gcd@_call_0 Bool )
(declare-var gcd@_4_0 Bool )
(declare-var gcd@_6_0 Bool )
(declare-var gcd@_11_0 Bool )
(declare-var gcd@%_br3_0 Int )
(declare-var gcd@_8_0 Bool )
(declare-var gcd@%_br2_0 Int )
(declare-var gcd@_.0_0 Bool )
(declare-var |tuple(gcd@_4_0, gcd@_.0_0)| Bool )
(declare-var gcd@%.0_1 Int )
(declare-var gcd@%.0_2 Int )
(declare-var gcd@.split_0 Bool )
(declare-var divides@%_6_0 Int )
(declare-var divides@%_br1_0 Bool )
(declare-var divides@%_br_0 Bool )
(declare-var divides@%.0_3 Int )
(declare-var divides@%n_0 Int )
(declare-var divides@%m_0 Int )
(declare-var divides@%.0_0 Int )
(declare-var divides@_call_0 Bool )
(declare-var divides@_3_0 Bool )
(declare-var divides@_5_0 Bool )
(declare-var divides@%_br2_0 Int )
(declare-var divides@_.0_0 Bool )
(declare-var |tuple(divides@_3_0, divides@_.0_0)| Bool )
(declare-var |tuple(divides@_call_0, divides@_.0_0)| Bool )
(declare-var divides@%.0_1 Int )
(declare-var divides@%.0_2 Int )
(declare-var divides@.split_0 Bool )
(declare-var main@%_9_0 Int )
(declare-var main@%_10_0 Int )
(declare-var main@%_11_0 Bool )
(declare-var main@%_22_0 Bool )
(declare-var main@%_25_0 Bool )
(declare-var main@%_19_0 Bool )
(declare-var main@%_17_0 Bool )
(declare-var main@%_13_0 Bool )
(declare-var main@%_14_0 Bool )
(declare-var main@%or.cond.i_0 Bool )
(declare-var main@%_8_0 Bool )
(declare-var main@%_4_0 Bool )
(declare-var main@%_5_0 Bool )
(declare-var main@%_6_0 Bool )
(declare-var main@%_1_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@_bb2_0 Bool )
(declare-var main@precall_0 Bool )
(declare-var main@gcd_0 Bool )
(declare-var main@%.01_0 Int )
(declare-var main@%.0_0 Int )
(declare-var main@%.01_1 Int )
(declare-var main@%.0_1 Int )
(declare-var main@postcall_0 Bool )
(declare-var main@_bb3_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(declare-var main@_bb5_0 Bool )
(declare-var main@_bb6_0 Bool )
(declare-var main@_bb8_0 Bool )
(declare-var main@%_24_0 Int )
(declare-var main@precall6_0 Bool )
(declare-var main@_bb7_0 Bool )
(declare-var main@%_21_0 Int )
(declare-var main@precall4_0 Bool )
(declare-var main@gcd_1 Bool )
(declare-var main@%.01_2 Int )
(declare-var main@%.0_2 Int )
(declare-var main@%.01_3 Int )
(declare-var main@%.0_3 Int )
(declare-var main@_bb4_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0))
(rule (gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0))
(rule (gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0))
(rule (gcd@_call gcd@%y1_0 gcd@%y2_0))
(rule (let ((a!1 (and (gcd@_call gcd@%y1_0 gcd@%y2_0)
                true
                (= gcd@%_2_0 (< gcd@%y1_0 1))
                (= gcd@%_or.cond_0 (< gcd@%y2_0 1))
                (= gcd@%or.cond_0 (or gcd@%_2_0 gcd@%_or.cond_0))
                (not gcd@%or.cond_0)
                (=> gcd@_4_0 (and gcd@_4_0 gcd@_call_0))
                (=> gcd@_4_0 (= gcd@%_br_0 (= gcd@%y1_0 gcd@%y2_0)))
                (=> gcd@_6_0 (and gcd@_6_0 gcd@_4_0))
                (=> (and gcd@_6_0 gcd@_4_0) (not gcd@%_br_0))
                (=> gcd@_6_0 (= gcd@%_br1_0 (> gcd@%y1_0 gcd@%y2_0)))
                (=> gcd@_11_0 (and gcd@_11_0 gcd@_6_0))
                (=> (and gcd@_11_0 gcd@_6_0) (not gcd@%_br1_0))
                (=> gcd@_11_0 (= gcd@%_12_0 (- gcd@%y2_0 gcd@%y1_0)))
                (gcd gcd@_11_0 false false gcd@%y1_0 gcd@%_12_0 gcd@%_br3_0)
                (=> gcd@_8_0 (and gcd@_8_0 gcd@_6_0))
                (=> (and gcd@_8_0 gcd@_6_0) gcd@%_br1_0)
                (=> gcd@_8_0 (= gcd@%_9_0 (- gcd@%y1_0 gcd@%y2_0)))
                (gcd gcd@_8_0 false false gcd@%_9_0 gcd@%y2_0 gcd@%_br2_0)
                (=> |tuple(gcd@_4_0, gcd@_.0_0)| gcd@_4_0)
                (=> gcd@_.0_0
                    (or (and gcd@_.0_0 gcd@_11_0)
                        (and gcd@_.0_0 gcd@_8_0)
                        (and gcd@_4_0 |tuple(gcd@_4_0, gcd@_.0_0)|)))
                (=> (and gcd@_.0_0 gcd@_11_0) (= gcd@%.0_0 gcd@%_br3_0))
                (=> (and gcd@_.0_0 gcd@_8_0) (= gcd@%.0_1 gcd@%_br2_0))
                (=> (and gcd@_4_0 |tuple(gcd@_4_0, gcd@_.0_0)|) gcd@%_br_0)
                (=> (and gcd@_4_0 |tuple(gcd@_4_0, gcd@_.0_0)|)
                    (= gcd@%.0_2 gcd@%y1_0))
                (=> (and gcd@_.0_0 gcd@_11_0) (= gcd@%.0_3 gcd@%.0_0))
                (=> (and gcd@_.0_0 gcd@_8_0) (= gcd@%.0_3 gcd@%.0_1))
                (=> (and gcd@_4_0 |tuple(gcd@_4_0, gcd@_.0_0)|)
                    (= gcd@%.0_3 gcd@%.0_2))
                (=> gcd@.split_0 (and gcd@.split_0 gcd@_.0_0))
                gcd@.split_0)))
  (=> a!1 (gcd@.split gcd@%.0_3 gcd@%y1_0 gcd@%y2_0))))
(rule (=> (gcd@.split gcd@%.0_0 gcd@%y1_0 gcd@%y2_0)
    (gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0)))
(rule (divides true true true divides@%n_0 divides@%m_0 divides@%.0_0))
(rule (divides false true true divides@%n_0 divides@%m_0 divides@%.0_0))
(rule (divides false false false divides@%n_0 divides@%m_0 divides@%.0_0))
(rule (divides@_call divides@%m_0 divides@%n_0))
(rule (let ((a!1 (and (divides@_call divides@%m_0 divides@%n_0)
                true
                (= divides@%_br_0 (= divides@%m_0 0))
                (=> divides@_3_0 (and divides@_3_0 divides@_call_0))
                (=> (and divides@_3_0 divides@_call_0) (not divides@%_br_0))
                (=> divides@_3_0
                    (= divides@%_br1_0 (< divides@%m_0 divides@%n_0)))
                (=> divides@_5_0 (and divides@_5_0 divides@_3_0))
                (=> (and divides@_5_0 divides@_3_0) (not divides@%_br1_0))
                (=> divides@_5_0
                    (= divides@%_6_0 (- divides@%m_0 divides@%n_0)))
                (divides divides@_5_0
                         false
                         false
                         divides@%n_0
                         divides@%_6_0
                         divides@%_br2_0)
                (=> |tuple(divides@_3_0, divides@_.0_0)| divides@_3_0)
                (=> |tuple(divides@_call_0, divides@_.0_0)| divides@_call_0)
                (=> divides@_.0_0
                    (or (and divides@_.0_0 divides@_5_0)
                        (and divides@_3_0 |tuple(divides@_3_0, divides@_.0_0)|)
                        (and divides@_call_0
                             |tuple(divides@_call_0, divides@_.0_0)|)))
                (=> (and divides@_.0_0 divides@_5_0)
                    (= divides@%.0_0 divides@%_br2_0))
                (=> (and divides@_3_0 |tuple(divides@_3_0, divides@_.0_0)|)
                    divides@%_br1_0)
                (=> (and divides@_3_0 |tuple(divides@_3_0, divides@_.0_0)|)
                    (= divides@%.0_1 0))
                (=> (and divides@_call_0
                         |tuple(divides@_call_0, divides@_.0_0)|)
                    divides@%_br_0)
                (=> (and divides@_call_0
                         |tuple(divides@_call_0, divides@_.0_0)|)
                    (= divides@%.0_2 1))
                (=> (and divides@_.0_0 divides@_5_0)
                    (= divides@%.0_3 divides@%.0_0))
                (=> (and divides@_3_0 |tuple(divides@_3_0, divides@_.0_0)|)
                    (= divides@%.0_3 divides@%.0_1))
                (=> (and divides@_call_0
                         |tuple(divides@_call_0, divides@_.0_0)|)
                    (= divides@%.0_3 divides@%.0_2))
                (=> divides@.split_0 (and divides@.split_0 divides@_.0_0))
                divides@.split_0)))
  (=> a!1 (divides@.split divides@%.0_3 divides@%m_0 divides@%n_0))))
(rule (=> (divides@.split divides@%.0_0 divides@%m_0 divides@%n_0)
    (divides true false false divides@%n_0 divides@%m_0 divides@%.0_0)))
(rule main@entry)
(rule (let ((a!1 (and main@entry
                true
                (= main@%_1_0 (< main@%_0_0 1))
                (not main@%_1_0)
                (=> main@_bb_0 (and main@_bb_0 main@entry_0))
                (=> main@_bb_0 (= main@%_4_0 (> main@%_0_0 0)))
                (=> main@_bb_0 (= main@%_5_0 (> main@%_3_0 0)))
                (=> main@_bb_0 (= main@%_6_0 (and main@%_5_0 main@%_4_0)))
                (=> main@_bb_0 main@%_6_0)
                (=> main@_bb2_0 (and main@_bb2_0 main@_bb_0))
                (=> main@precall_0 (and main@precall_0 main@_bb2_0))
                (=> (and main@precall_0 main@_bb2_0) (not main@%_8_0))
                (=> main@gcd_0 (and main@gcd_0 main@precall_0))
                main@gcd_0
                (=> (and main@gcd_0 main@precall_0) (= main@%.01_0 main@%_3_0))
                (=> (and main@gcd_0 main@precall_0) (= main@%.0_0 main@%_0_0))
                (=> (and main@gcd_0 main@precall_0) (= main@%.01_1 main@%.01_0))
                (=> (and main@gcd_0 main@precall_0) (= main@%.0_1 main@%.0_0)))))
  (=> a!1 (main@gcd main@%.01_1 main@%.0_1))))
(rule (let ((a!1 (and main@entry
                true
                (= main@%_1_0 (< main@%_0_0 1))
                (not main@%_1_0)
                (=> main@_bb_0 (and main@_bb_0 main@entry_0))
                (=> main@_bb_0 (= main@%_4_0 (> main@%_0_0 0)))
                (=> main@_bb_0 (= main@%_5_0 (> main@%_3_0 0)))
                (=> main@_bb_0 (= main@%_6_0 (and main@%_5_0 main@%_4_0)))
                (=> main@_bb_0 main@%_6_0)
                (=> main@_bb2_0 (and main@_bb2_0 main@_bb_0))
                (=> main@postcall_0 (and main@postcall_0 main@_bb2_0))
                (=> (and main@postcall_0 main@_bb2_0) main@%_8_0)
                (gcd main@postcall_0
                     false
                     false
                     main@%_0_0
                     main@%_3_0
                     main@%_9_0)
                (divides main@postcall_0
                         false
                         false
                         main@%_9_0
                         main@%_0_0
                         main@%_10_0)
                (=> main@postcall_0 (= main@%_11_0 (= main@%_10_0 0)))
                (=> main@postcall_0 main@%_11_0)
                (=> main@_bb3_0 (and main@_bb3_0 main@postcall_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@_bb3_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(rule (let ((a!1 (and (main@gcd main@%.01_0 main@%.0_0)
                true
                (= main@%_13_0 (< main@%.0_0 1))
                (= main@%_14_0 (< main@%.01_0 1))
                (= main@%or.cond.i_0 (or main@%_13_0 main@%_14_0))
                (=> main@_bb5_0 (and main@_bb5_0 main@gcd_0))
                (=> (and main@_bb5_0 main@gcd_0) (not main@%or.cond.i_0))
                (=> main@_bb5_0 (= main@%_17_0 (= main@%.0_0 main@%.01_0)))
                (=> main@_bb5_0 (not main@%_17_0))
                (=> main@_bb6_0 (and main@_bb6_0 main@_bb5_0))
                (=> main@_bb6_0 (= main@%_19_0 (> main@%.0_0 main@%.01_0)))
                (=> main@_bb8_0 (and main@_bb8_0 main@_bb6_0))
                (=> (and main@_bb8_0 main@_bb6_0) (not main@%_19_0))
                (=> main@_bb8_0 (= main@%_24_0 (- main@%.01_0 main@%.0_0)))
                (=> main@_bb8_0 (not main@%_25_0))
                (=> main@precall6_0 (and main@precall6_0 main@_bb8_0))
                (=> main@_bb7_0 (and main@_bb7_0 main@_bb6_0))
                (=> (and main@_bb7_0 main@_bb6_0) main@%_19_0)
                (=> main@_bb7_0 (= main@%_21_0 (- main@%.0_0 main@%.01_0)))
                (=> main@_bb7_0 (not main@%_22_0))
                (=> main@precall4_0 (and main@precall4_0 main@_bb7_0))
                (=> main@gcd_1
                    (or (and main@gcd_1 main@precall6_0)
                        (and main@gcd_1 main@precall4_0)))
                main@gcd_1
                (=> (and main@gcd_1 main@precall6_0)
                    (= main@%.01_1 main@%_24_0))
                (=> (and main@gcd_1 main@precall6_0) (= main@%.0_1 main@%.0_0))
                (=> (and main@gcd_1 main@precall4_0)
                    (= main@%.01_2 main@%.01_0))
                (=> (and main@gcd_1 main@precall4_0) (= main@%.0_2 main@%_21_0))
                (=> (and main@gcd_1 main@precall6_0)
                    (= main@%.01_3 main@%.01_1))
                (=> (and main@gcd_1 main@precall6_0) (= main@%.0_3 main@%.0_1))
                (=> (and main@gcd_1 main@precall4_0)
                    (= main@%.01_3 main@%.01_2))
                (=> (and main@gcd_1 main@precall4_0) (= main@%.0_3 main@%.0_2)))))
  (=> a!1 (main@gcd main@%.01_3 main@%.0_3))))
(rule (=> (and (main@gcd main@%.01_0 main@%.0_0)
         true
         (= main@%_13_0 (< main@%.0_0 1))
         (= main@%_14_0 (< main@%.01_0 1))
         (= main@%or.cond.i_0 (or main@%_13_0 main@%_14_0))
         (=> main@_bb4_0 (and main@_bb4_0 main@gcd_0))
         (=> (and main@_bb4_0 main@gcd_0) main@%or.cond.i_0)
         (=> main@verifier.error_0 (and main@verifier.error_0 main@_bb4_0))
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    main@verifier.error.split))
(query main@verifier.error.split)

