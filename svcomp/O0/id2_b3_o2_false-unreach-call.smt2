(set-info :original "/tmp/sea-EBKC93/id2_b3_o2_false-unreach-call.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel id2@_call (Int ))
(declare-rel id2@UnifiedReturnBlock.split (Int Int ))
(declare-rel id2 (Bool Bool Bool Int Int ))
(declare-rel main@entry (Int ))
(declare-rel main@verifier.error.split ())
(declare-var id2@%_4_0 Int )
(declare-var id2@%_5_0 Int )
(declare-var id2@%_6_0 Bool )
(declare-var id2@%_._0 Int )
(declare-var id2@%_br_0 Bool )
(declare-var id2@%UnifiedRetVal_2 Int )
(declare-var id2@%x_0 Int )
(declare-var id2@%UnifiedRetVal_0 Int )
(declare-var id2@_call_0 Bool )
(declare-var id2@_3_0 Bool )
(declare-var id2@%._0 Int )
(declare-var id2@UnifiedReturnBlock_0 Bool )
(declare-var |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)| Bool )
(declare-var id2@%UnifiedRetVal_1 Int )
(declare-var id2@UnifiedReturnBlock.split_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%_2_0 Int )
(declare-var main@%_3_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@_bb_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (id2 true true true id2@%x_0 id2@%UnifiedRetVal_0))
(rule (id2 false true true id2@%x_0 id2@%UnifiedRetVal_0))
(rule (id2 false false false id2@%x_0 id2@%UnifiedRetVal_0))
(rule (id2@_call id2@%x_0))
(rule (let ((a!1 (and (id2@_call id2@%x_0)
                true
                (= id2@%_br_0 (= id2@%x_0 0))
                (=> id2@_3_0 (and id2@_3_0 id2@_call_0))
                (=> (and id2@_3_0 id2@_call_0) (not id2@%_br_0))
                (=> id2@_3_0 (= id2@%_4_0 (+ id2@%x_0 (- 1))))
                (=> id2@_3_0 (= id2@%_6_0 (> id2@%_5_0 2)))
                (=> id2@_3_0 (= id2@%_._0 (+ id2@%_5_0 1)))
                (=> id2@_3_0 (= id2@%._0 (ite id2@%_6_0 3 id2@%_._0)))
                (=> |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)| id2@_call_0)
                (=> id2@UnifiedReturnBlock_0
                    (or (and id2@UnifiedReturnBlock_0 id2@_3_0)
                        (and id2@_call_0
                             |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)|)))
                (=> (and id2@UnifiedReturnBlock_0 id2@_3_0)
                    (= id2@%UnifiedRetVal_0 id2@%._0))
                (=> (and id2@_call_0
                         |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)|)
                    id2@%_br_0)
                (=> (and id2@_call_0
                         |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)|)
                    (= id2@%UnifiedRetVal_1 0))
                (=> (and id2@UnifiedReturnBlock_0 id2@_3_0)
                    (= id2@%UnifiedRetVal_2 id2@%UnifiedRetVal_0))
                (=> (and id2@_call_0
                         |tuple(id2@_call_0, id2@UnifiedReturnBlock_0)|)
                    (= id2@%UnifiedRetVal_2 id2@%UnifiedRetVal_1))
                (=> id2@UnifiedReturnBlock.split_0
                    (and id2@UnifiedReturnBlock.split_0
                         id2@UnifiedReturnBlock_0))
                id2@UnifiedReturnBlock.split_0)))
  (=> a!1 (id2@UnifiedReturnBlock.split id2@%UnifiedRetVal_2 id2@%x_0))))
(rule (=> (id2@UnifiedReturnBlock.split id2@%UnifiedRetVal_0 id2@%x_0)
    (id2 true false false id2@%x_0 id2@%UnifiedRetVal_0)))
(rule (main@entry @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_3_0 (= main@%_2_0 2))
         main@%_3_0
         (=> main@_bb_0 (and main@_bb_0 main@entry_0))
         (=> main@verifier.error_0 (and main@verifier.error_0 main@_bb_0))
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    main@verifier.error.split))
(query main@verifier.error.split)

