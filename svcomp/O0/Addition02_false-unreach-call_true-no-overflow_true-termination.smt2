(set-info :original "/tmp/sea-L_xrYd/Addition02_false-unreach-call_true-no-overflow_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel addition@_1 (Int Int ))
(declare-rel addition@.split (Int Int Int ))
(declare-rel addition (Bool Bool Bool Int Int Int ))
(declare-rel main@entry ())
(declare-rel main@verifier.error.split ())
(declare-var addition@%_7_0 Int )
(declare-var addition@%_8_0 Int )
(declare-var addition@%_13_0 Int )
(declare-var addition@%_14_0 Int )
(declare-var addition@%_br3_0 Bool )
(declare-var addition@%_br1_0 Bool )
(declare-var addition@%_br_0 Bool )
(declare-var addition@%.0_4 Int )
(declare-var addition@%m_0 Int )
(declare-var addition@%n_0 Int )
(declare-var addition@%.0_0 Int )
(declare-var addition@_1_0 Bool )
(declare-var addition@%_call_0 Int )
(declare-var addition@_4_0 Bool )
(declare-var addition@_10_0 Bool )
(declare-var addition@_12_0 Bool )
(declare-var addition@%_br4_0 Int )
(declare-var addition@_6_0 Bool )
(declare-var addition@%_br2_0 Int )
(declare-var addition@_.0_0 Bool )
(declare-var |tuple(addition@_10_0, addition@_.0_0)| Bool )
(declare-var |tuple(addition@_1_0, addition@_.0_0)| Bool )
(declare-var addition@%.0_1 Int )
(declare-var addition@%.0_2 Int )
(declare-var addition@%.0_3 Int )
(declare-var addition@.split_0 Bool )
(declare-var main@%_6_0 Int )
(declare-var main@%_7_0 Int )
(declare-var main@%_8_0 Bool )
(declare-var main@%_4_0 Bool )
(declare-var main@%_1_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@_bb1_0 Bool )
(declare-var main@_bb2_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (addition true true true addition@%m_0 addition@%n_0 addition@%.0_0))
(rule (addition false true true addition@%m_0 addition@%n_0 addition@%.0_0))
(rule (addition false false false addition@%m_0 addition@%n_0 addition@%.0_0))
(rule (addition@_1 addition@%m_0 addition@%n_0))
(rule (let ((a!1 (and (addition@_1 addition@%m_0 addition@%n_0)
                true
                (= addition@%_br_0 (= addition@%n_0 0))
                (=> addition@_4_0 (and addition@_4_0 addition@_1_0))
                (=> (and addition@_4_0 addition@_1_0) (not addition@%_br_0))
                (=> addition@_4_0 (= addition@%_br1_0 (> addition@%n_0 0)))
                (=> addition@_10_0 (and addition@_10_0 addition@_4_0))
                (=> (and addition@_10_0 addition@_4_0) (not addition@%_br1_0))
                (=> addition@_10_0 (= addition@%_br3_0 (< addition@%n_0 0)))
                (=> addition@_12_0 (and addition@_12_0 addition@_10_0))
                (=> (and addition@_12_0 addition@_10_0) addition@%_br3_0)
                (=> addition@_12_0 (= addition@%_13_0 (+ addition@%m_0 (- 1))))
                (=> addition@_12_0 (= addition@%_14_0 (+ addition@%n_0 1)))
                (addition addition@_12_0
                          false
                          false
                          addition@%_13_0
                          addition@%_14_0
                          addition@%_br4_0)
                (=> addition@_6_0 (and addition@_6_0 addition@_4_0))
                (=> (and addition@_6_0 addition@_4_0) addition@%_br1_0)
                (=> addition@_6_0 (= addition@%_7_0 (+ addition@%m_0 1)))
                (=> addition@_6_0 (= addition@%_8_0 (+ addition@%n_0 (- 1))))
                (addition addition@_6_0
                          false
                          false
                          addition@%_7_0
                          addition@%_8_0
                          addition@%_br2_0)
                (=> |tuple(addition@_10_0, addition@_.0_0)| addition@_10_0)
                (=> |tuple(addition@_1_0, addition@_.0_0)| addition@_1_0)
                (=> addition@_.0_0
                    (or (and addition@_.0_0 addition@_12_0)
                        (and addition@_10_0
                             |tuple(addition@_10_0, addition@_.0_0)|)
                        (and addition@_.0_0 addition@_6_0)
                        (and addition@_1_0
                             |tuple(addition@_1_0, addition@_.0_0)|)))
                (=> (and addition@_.0_0 addition@_12_0)
                    (= addition@%.0_0 addition@%_br4_0))
                (=> (and addition@_10_0 |tuple(addition@_10_0, addition@_.0_0)|)
                    (not addition@%_br3_0))
                (=> (and addition@_10_0 |tuple(addition@_10_0, addition@_.0_0)|)
                    (= addition@%.0_1 addition@%_call_0))
                (=> (and addition@_.0_0 addition@_6_0)
                    (= addition@%.0_2 addition@%_br2_0))
                (=> (and addition@_1_0 |tuple(addition@_1_0, addition@_.0_0)|)
                    addition@%_br_0)
                (=> (and addition@_1_0 |tuple(addition@_1_0, addition@_.0_0)|)
                    (= addition@%.0_3 addition@%m_0))
                (=> (and addition@_.0_0 addition@_12_0)
                    (= addition@%.0_4 addition@%.0_0))
                (=> (and addition@_10_0 |tuple(addition@_10_0, addition@_.0_0)|)
                    (= addition@%.0_4 addition@%.0_1))
                (=> (and addition@_.0_0 addition@_6_0)
                    (= addition@%.0_4 addition@%.0_2))
                (=> (and addition@_1_0 |tuple(addition@_1_0, addition@_.0_0)|)
                    (= addition@%.0_4 addition@%.0_3))
                (=> addition@.split_0 (and addition@.split_0 addition@_.0_0))
                addition@.split_0)))
  (=> a!1 (addition@.split addition@%.0_4 addition@%m_0 addition@%n_0))))
(rule (=> (addition@.split addition@%.0_0 addition@%m_0 addition@%n_0)
    (addition true false false addition@%m_0 addition@%n_0 addition@%.0_0)))
(rule main@entry)
(rule (let ((a!1 (=> main@_bb_0
               (= main@%_4_0
                  (ite (>= main@%_3_0 0) (< 1073741823 main@%_3_0) true)))))
(let ((a!2 (and main@entry
                true
                (= main@%_1_0
                   (ite (>= main@%_0_0 0) (< 1073741823 main@%_0_0) true))
                (not main@%_1_0)
                (=> main@_bb_0 (and main@_bb_0 main@entry_0))
                a!1
                (=> main@_bb_0 (not main@%_4_0))
                (=> main@_bb1_0 (and main@_bb1_0 main@_bb_0))
                (addition main@_bb1_0
                          false
                          false
                          main@%_0_0
                          main@%_3_0
                          main@%_6_0)
                (=> main@_bb1_0 (= main@%_7_0 (- main@%_0_0 main@%_3_0)))
                (=> main@_bb1_0 (= main@%_8_0 (= main@%_6_0 main@%_7_0)))
                (=> main@_bb1_0 (not main@%_8_0))
                (=> main@_bb2_0 (and main@_bb2_0 main@_bb1_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@_bb2_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!2 main@verifier.error.split))))
(query main@verifier.error.split)

