(set-info :original "/tmp/sea-X5zfFQ/trex02_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel foo@_1 ((Array Int Int) Int ))
(declare-rel foo@.split ((Array Int Int) (Array Int Int) Int ))
(declare-rel foo (Bool Bool Bool (Array Int Int) (Array Int Int) Int ))
(declare-rel main@entry (Int (Array Int Int) Int ))
(declare-rel main@_bb (Int Int (Array Int Int) ))
(declare-rel main@verifier.error.split ())
(declare-var foo@%_3_0 Int )
(declare-var @x_0 Int )
(declare-var foo@%_4_0 Int )
(declare-var foo@%_call_0 (Array Int Int) )
(declare-var foo@%_store_0 (Array Int Int) )
(declare-var foo@_1_0 Bool )
(declare-var foo@.split_0 Bool )
(declare-var main@%_9_0 Int )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@%_16_0 Bool )
(declare-var main@%_12_0 Int )
(declare-var main@%_13_0 Bool )
(declare-var main@%_15_0 Bool )
(declare-var main@%_6_0 Int )
(declare-var main@%_7_0 Bool )
(declare-var main@%_0_0 (Array Int Int) )
(declare-var main@%_1_0 (Array Int Int) )
(declare-var main@%_2_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%_3_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%_4_0 (Array Int Int) )
(declare-var main@_bb_0 Bool )
(declare-var main@%shadow.mem.0_0 (Array Int Int) )
(declare-var main@%shadow.mem.0_1 (Array Int Int) )
(declare-var main@_bb1_0 Bool )
(declare-var main@%_11_0 (Array Int Int) )
(declare-var main@_bb_1 Bool )
(declare-var main@%shadow.mem.0_2 (Array Int Int) )
(declare-var main@orig.main.exit_0 Bool )
(declare-var main@%_14_0 Int )
(declare-var main@precall_0 Bool )
(declare-var main@__VERIFIER_assert_0 Bool )
(declare-var main@_bb2_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (foo true true true foo@%_call_0 foo@%_store_0 @x_0))
(rule (foo false true true foo@%_call_0 foo@%_store_0 @x_0))
(rule (foo false false false foo@%_call_0 foo@%_store_0 @x_0))
(rule (foo@_1 foo@%_call_0 @x_0))
(rule (=> (and (foo@_1 foo@%_call_0 @x_0)
         true
         (= foo@%_3_0 (select foo@%_call_0 @x_0))
         (= foo@%_4_0 (+ foo@%_3_0 (- 1)))
         (= foo@%_store_0 (store foo@%_call_0 @x_0 foo@%_4_0))
         (=> foo@.split_0 (and foo@.split_0 foo@_1_0))
         foo@.split_0)
    (foo@.split foo@%_call_0 foo@%_store_0 @x_0)))
(rule (=> (foo@.split foo@%_call_0 foo@%_store_0 @x_0)
    (foo true false false foo@%_call_0 foo@%_store_0 @x_0)))
(rule (main@entry @__VERIFIER_nondet_bool_0 main@%_0_0 @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_bool_0
                     main@%_0_0
                     @__VERIFIER_nondet_int_0)
         true
         (= main@%_1_0 (store main@%_0_0 @x_0 0))
         (= main@%_2_0 @__VERIFIER_nondet_int_0)
         (= main@%_4_0 (store main@%_1_0 @x_0 main@%_3_0))
         (=> main@_bb_0 (and main@_bb_0 main@entry_0))
         main@_bb_0
         (=> (and main@_bb_0 main@entry_0) (= main@%shadow.mem.0_0 main@%_4_0))
         (=> (and main@_bb_0 main@entry_0)
             (= main@%shadow.mem.0_1 main@%shadow.mem.0_0)))
    (main@_bb @x_0 @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_1)))
(rule (=> (and (main@_bb @x_0 @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_0)
         true
         (= main@%_6_0 (select main@%shadow.mem.0_0 @x_0))
         (= main@%_7_0 (> main@%_6_0 0))
         (=> main@_bb1_0 (and main@_bb1_0 main@_bb_0))
         (=> (and main@_bb1_0 main@_bb_0) main@%_7_0)
         (=> main@_bb1_0 (= main@%_9_0 @__VERIFIER_nondet_bool_0))
         (foo main@_bb1_0 false false main@%shadow.mem.0_0 main@%_11_0 @x_0)
         (=> main@_bb_1 (and main@_bb_1 main@_bb1_0))
         main@_bb_1
         (=> (and main@_bb_1 main@_bb1_0) (= main@%shadow.mem.0_1 main@%_11_0))
         (=> (and main@_bb_1 main@_bb1_0)
             (= main@%shadow.mem.0_2 main@%shadow.mem.0_1)))
    (main@_bb @x_0 @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_2)))
(rule (let ((a!1 (and (main@_bb @x_0 @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_0)
                true
                (= main@%_6_0 (select main@%shadow.mem.0_0 @x_0))
                (= main@%_7_0 (> main@%_6_0 0))
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@_bb_0))
                (=> (and main@orig.main.exit_0 main@_bb_0) (not main@%_7_0))
                (=> main@orig.main.exit_0
                    (= main@%_12_0 (select main@%shadow.mem.0_0 @x_0)))
                (=> main@orig.main.exit_0 (= main@%_13_0 (= main@%_12_0 0)))
                (=> main@orig.main.exit_0 (= main@%_14_0 (ite main@%_13_0 1 0)))
                (=> main@orig.main.exit_0 (not main@%_15_0))
                (=> main@precall_0 (and main@precall_0 main@orig.main.exit_0))
                (=> main@__VERIFIER_assert_0
                    (and main@__VERIFIER_assert_0 main@precall_0))
                (=> main@__VERIFIER_assert_0 (= main@%_16_0 (= main@%_14_0 0)))
                (=> main@__VERIFIER_assert_0 main@%_16_0)
                (=> main@_bb2_0 (and main@_bb2_0 main@__VERIFIER_assert_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@_bb2_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(query main@verifier.error.split)

