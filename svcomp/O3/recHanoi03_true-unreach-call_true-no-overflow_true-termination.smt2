(set-info :original "/tmp/sea-U_U7Ij/recHanoi03_true-unreach-call_true-no-overflow_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel hanoi@_tail (Int ))
(declare-rel hanoi@UnifiedReturnBlock.split (Int Int ))
(declare-rel hanoi (Bool Bool Bool Int Int ))
(declare-rel main@entry ())
(declare-rel main@entry.split ())
(declare-var hanoi@%_4_0 Int )
(declare-var hanoi@%_5_0 Int )
(declare-var hanoi@%_6_0 Int )
(declare-var hanoi@%UnifiedRetVal_2 Int )
(declare-var hanoi@%_br_0 Bool )
(declare-var hanoi@%n_0 Int )
(declare-var hanoi@%UnifiedRetVal_0 Int )
(declare-var hanoi@_tail_0 Bool )
(declare-var hanoi@_3_0 Bool )
(declare-var hanoi@%_br1_0 Int )
(declare-var hanoi@_br2_0 Bool )
(declare-var hanoi@UnifiedReturnBlock_0 Bool )
(declare-var hanoi@%UnifiedRetVal_1 Int )
(declare-var hanoi@UnifiedReturnBlock.split_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%.off.i_0 Int )
(declare-var main@%_1_0 Bool )
(declare-var main@%_2_0 Int )
(declare-var main@%_3_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@entry.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (hanoi true true true hanoi@%n_0 hanoi@%UnifiedRetVal_0))
(rule (hanoi false true true hanoi@%n_0 hanoi@%UnifiedRetVal_0))
(rule (hanoi false false false hanoi@%n_0 hanoi@%UnifiedRetVal_0))
(rule (hanoi@_tail hanoi@%n_0))
(rule (let ((a!1 (and (hanoi@_tail hanoi@%n_0)
                true
                (= hanoi@%_br_0 (= hanoi@%n_0 1))
                (=> hanoi@_3_0 (and hanoi@_3_0 hanoi@_tail_0))
                (=> (and hanoi@_3_0 hanoi@_tail_0) (not hanoi@%_br_0))
                (=> hanoi@_3_0 (= hanoi@%_4_0 (+ hanoi@%n_0 (- 1))))
                (hanoi hanoi@_3_0 false false hanoi@%_4_0 hanoi@%_5_0)
                (=> hanoi@_3_0 (= hanoi@%_6_0 (* hanoi@%_5_0 2)))
                (=> hanoi@_3_0 (= hanoi@%_br1_0 (+ hanoi@%_6_0 1)))
                (=> hanoi@_br2_0 (and hanoi@_br2_0 hanoi@_tail_0))
                (=> (and hanoi@_br2_0 hanoi@_tail_0) hanoi@%_br_0)
                (=> hanoi@UnifiedReturnBlock_0
                    (or (and hanoi@UnifiedReturnBlock_0 hanoi@_br2_0)
                        (and hanoi@UnifiedReturnBlock_0 hanoi@_3_0)))
                (=> (and hanoi@UnifiedReturnBlock_0 hanoi@_br2_0)
                    (= hanoi@%UnifiedRetVal_0 1))
                (=> (and hanoi@UnifiedReturnBlock_0 hanoi@_3_0)
                    (= hanoi@%UnifiedRetVal_1 hanoi@%_br1_0))
                (=> (and hanoi@UnifiedReturnBlock_0 hanoi@_br2_0)
                    (= hanoi@%UnifiedRetVal_2 hanoi@%UnifiedRetVal_0))
                (=> (and hanoi@UnifiedReturnBlock_0 hanoi@_3_0)
                    (= hanoi@%UnifiedRetVal_2 hanoi@%UnifiedRetVal_1))
                (=> hanoi@UnifiedReturnBlock.split_0
                    (and hanoi@UnifiedReturnBlock.split_0
                         hanoi@UnifiedReturnBlock_0))
                hanoi@UnifiedReturnBlock.split_0)))
  (=> a!1 (hanoi@UnifiedReturnBlock.split hanoi@%UnifiedRetVal_2 hanoi@%n_0))))
(rule (=> (hanoi@UnifiedReturnBlock.split hanoi@%UnifiedRetVal_0 hanoi@%n_0)
    (hanoi true false false hanoi@%n_0 hanoi@%UnifiedRetVal_0)))
(rule main@entry)
(rule (let ((a!1 (and main@entry
                true
                (= main@%.off.i_0 (+ main@%_0_0 (- 1)))
                (= main@%_1_0
                   (ite (>= main@%.off.i_0 0) (< 30 main@%.off.i_0) true))
                (not main@%_1_0)
                (hanoi true false false main@%_0_0 main@%_2_0)
                (= main@%_3_0 (< main@%_2_0 main@%_0_0))
                main@%_3_0
                (=> main@entry.split_0 (and main@entry.split_0 main@entry_0))
                main@entry.split_0)))
  (=> a!1 main@entry.split)))
(query main@entry.split)

