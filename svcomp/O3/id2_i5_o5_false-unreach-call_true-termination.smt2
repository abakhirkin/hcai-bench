(set-info :original "/tmp/sea-qqZQjr/id2_i5_o5_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel id@_tail (Int ))
(declare-rel id@id2.exit.split (Int Int ))
(declare-rel id (Bool Bool Bool Int Int ))
(declare-rel main@entry ())
(declare-rel main@entry.split ())
(declare-var id@%_6_0 Int )
(declare-var id@%_phitmp_0 Int )
(declare-var id@%_br2_0 Bool )
(declare-var id@%_br_0 Bool )
(declare-var id@%.0_3 Int )
(declare-var id@%x_0 Int )
(declare-var id@%.0_0 Int )
(declare-var id@_tail_0 Bool )
(declare-var id@_tail1_0 Bool )
(declare-var id@_5_0 Bool )
(declare-var id@%phitmp_0 Int )
(declare-var id@id2.exit_0 Bool )
(declare-var |tuple(id@_tail1_0, id@id2.exit_0)| Bool )
(declare-var |tuple(id@_tail_0, id@id2.exit_0)| Bool )
(declare-var id@%.0_1 Int )
(declare-var id@%.0_2 Int )
(declare-var id@id2.exit.split_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@entry.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (id true true true id@%x_0 id@%.0_0))
(rule (id false true true id@%x_0 id@%.0_0))
(rule (id false false false id@%x_0 id@%.0_0))
(rule (id@_tail id@%x_0))
(rule (let ((a!1 (and (id@_tail id@%x_0)
                true
                (= id@%_br_0 (= id@%x_0 0))
                (=> id@_tail1_0 (and id@_tail1_0 id@_tail_0))
                (=> (and id@_tail1_0 id@_tail_0) (not id@%_br_0))
                (=> id@_tail1_0 (= id@%_br2_0 (= id@%x_0 1)))
                (=> id@_5_0 (and id@_5_0 id@_tail1_0))
                (=> (and id@_5_0 id@_tail1_0) (not id@%_br2_0))
                (=> id@_5_0 (= id@%_6_0 (+ id@%x_0 (- 2))))
                (id id@_5_0 false false id@%_6_0 id@%_phitmp_0)
                (=> id@_5_0 (= id@%phitmp_0 (+ id@%_phitmp_0 2)))
                (=> |tuple(id@_tail1_0, id@id2.exit_0)| id@_tail1_0)
                (=> |tuple(id@_tail_0, id@id2.exit_0)| id@_tail_0)
                (=> id@id2.exit_0
                    (or (and id@id2.exit_0 id@_5_0)
                        (and id@_tail1_0 |tuple(id@_tail1_0, id@id2.exit_0)|)
                        (and id@_tail_0 |tuple(id@_tail_0, id@id2.exit_0)|)))
                (=> (and id@id2.exit_0 id@_5_0) (= id@%.0_0 id@%phitmp_0))
                (=> (and id@_tail1_0 |tuple(id@_tail1_0, id@id2.exit_0)|)
                    id@%_br2_0)
                (=> (and id@_tail1_0 |tuple(id@_tail1_0, id@id2.exit_0)|)
                    (= id@%.0_1 1))
                (=> (and id@_tail_0 |tuple(id@_tail_0, id@id2.exit_0)|)
                    id@%_br_0)
                (=> (and id@_tail_0 |tuple(id@_tail_0, id@id2.exit_0)|)
                    (= id@%.0_2 0))
                (=> (and id@id2.exit_0 id@_5_0) (= id@%.0_3 id@%.0_0))
                (=> (and id@_tail1_0 |tuple(id@_tail1_0, id@id2.exit_0)|)
                    (= id@%.0_3 id@%.0_1))
                (=> (and id@_tail_0 |tuple(id@_tail_0, id@id2.exit_0)|)
                    (= id@%.0_3 id@%.0_2))
                (=> id@id2.exit.split_0 (and id@id2.exit.split_0 id@id2.exit_0))
                id@id2.exit.split_0)))
  (=> a!1 (id@id2.exit.split id@%.0_3 id@%x_0))))
(rule (=> (id@id2.exit.split id@%.0_0 id@%x_0) (id true false false id@%x_0 id@%.0_0)))
(rule main@entry)
(rule (=> (and main@entry
         true
         (id true false false 5 main@%_0_0)
         (= main@%_1_0 (= main@%_0_0 5))
         main@%_1_0
         (=> main@entry.split_0 (and main@entry.split_0 main@entry_0))
         main@entry.split_0)
    main@entry.split))
(query main@entry.split)

