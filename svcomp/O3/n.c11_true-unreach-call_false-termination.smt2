(set-info :original "/tmp/sea-KzDi9j/n.c11_true-unreach-call_false-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@.lr.ph (Int Int ))
(declare-rel main@orig.main.exit.split ())
(declare-var main@%_6_0 Bool )
(declare-var main@%_7_0 Bool )
(declare-var main@%_2_0 Bool )
(declare-var main@%len.0.op.i_0 Int )
(declare-var main@%_4_0 Int )
(declare-var main@%_5_0 Bool )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%len.0.i1_2 Int )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Bool )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@.lr.ph.preheader_0 Bool )
(declare-var main@.lr.ph_0 Bool )
(declare-var main@%len.0.i1_0 Int )
(declare-var main@%len.0.i1_1 Int )
(declare-var main@orig.main.exit_0 Bool )
(declare-var main@%len.0.i.lcssa_0 Bool )
(declare-var main@%len.0.i.lcssa_1 Bool )
(declare-var main@orig.main.exit.split_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@.lr.ph_1 Bool )
(declare-var main@.orig.main.exit_crit_edge_0 Bool )
(declare-var main@%.lcssa_0 Int )
(declare-var main@%phitmp_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_bool_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_bool_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_bool_0)
         (=> main@.lr.ph.preheader_0 (and main@.lr.ph.preheader_0 main@entry_0))
         (=> (and main@.lr.ph.preheader_0 main@entry_0) main@%_1_0)
         (=> main@.lr.ph_0 (and main@.lr.ph_0 main@.lr.ph.preheader_0))
         main@.lr.ph_0
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%len.0.i1_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%len.0.i1_1 main@%len.0.i1_0)))
    (main@.lr.ph main@%len.0.i1_1 @__VERIFIER_nondet_bool_0)))
(rule (let ((a!1 (and (main@entry @__VERIFIER_nondet_bool_0)
                true
                (= main@%_0_0 @__VERIFIER_nondet_bool_0)
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@entry_0))
                (=> (and main@orig.main.exit_0 main@entry_0) (not main@%_1_0))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%len.0.i.lcssa_0 true))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%len.0.i.lcssa_1 main@%len.0.i.lcssa_0))
                (=> main@orig.main.exit_0 (not main@%_6_0))
                (=> main@orig.main.exit_0
                    (= main@%_7_0 (= main@%len.0.i.lcssa_1 false)))
                (=> main@orig.main.exit_0 main@%_7_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!1 main@orig.main.exit.split)))
(rule (=> (and (main@.lr.ph main@%len.0.i1_0 @__VERIFIER_nondet_bool_0)
         true
         (= main@%_2_0 (= main@%len.0.i1_0 4))
         (= main@%len.0.op.i_0 (+ main@%len.0.i1_0 1))
         (= main@%_3_0 (ite main@%_2_0 1 main@%len.0.op.i_0))
         (= main@%_4_0 @__VERIFIER_nondet_bool_0)
         (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
         main@.lr.ph_1
         (=> (and main@.lr.ph_1 main@.lr.ph_0) main@%_5_0)
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%len.0.i1_1 main@%_3_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%len.0.i1_2 main@%len.0.i1_1)))
    (main@.lr.ph main@%len.0.i1_2 @__VERIFIER_nondet_bool_0)))
(rule (let ((a!1 (=> main@.orig.main.exit_crit_edge_0
               (= main@%phitmp_0
                  (ite (>= main@%.lcssa_1 0) (< main@%.lcssa_1 5) false)))))
(let ((a!2 (and (main@.lr.ph main@%len.0.i1_0 @__VERIFIER_nondet_bool_0)
                true
                (= main@%_2_0 (= main@%len.0.i1_0 4))
                (= main@%len.0.op.i_0 (+ main@%len.0.i1_0 1))
                (= main@%_3_0 (ite main@%_2_0 1 main@%len.0.op.i_0))
                (= main@%_4_0 @__VERIFIER_nondet_bool_0)
                (=> main@.orig.main.exit_crit_edge_0
                    (and main@.orig.main.exit_crit_edge_0 main@.lr.ph_0))
                (=> (and main@.orig.main.exit_crit_edge_0 main@.lr.ph_0)
                    (not main@%_5_0))
                (=> (and main@.orig.main.exit_crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_0 main@%_3_0))
                (=> (and main@.orig.main.exit_crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                a!1
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@.orig.main.exit_crit_edge_0))
                (=> (and main@orig.main.exit_0 main@.orig.main.exit_crit_edge_0)
                    (= main@%len.0.i.lcssa_0 main@%phitmp_0))
                (=> (and main@orig.main.exit_0 main@.orig.main.exit_crit_edge_0)
                    (= main@%len.0.i.lcssa_1 main@%len.0.i.lcssa_0))
                (=> main@orig.main.exit_0 (not main@%_6_0))
                (=> main@orig.main.exit_0
                    (= main@%_7_0 (= main@%len.0.i.lcssa_1 false)))
                (=> main@orig.main.exit_0 main@%_7_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!2 main@orig.main.exit.split))))
(query main@orig.main.exit.split)

