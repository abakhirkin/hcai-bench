(set-info :original "/tmp/sea-osdiFF/trex04_true-unreach-call_false-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int ))
(declare-rel main@_bb4 (Int Int ))
(declare-rel main@precall.split ())
(declare-var main@%_27_0 Bool )
(declare-var main@%_25_0 Bool )
(declare-var main@%_23_0 Int )
(declare-var main@%x.0.i_2 Int )
(declare-var main@%_18_0 Int )
(declare-var main@%_20_0 Int )
(declare-var main@%_13_0 Int )
(declare-var main@%_14_0 Bool )
(declare-var main@%_15_0 Int )
(declare-var main@%_8_0 Int )
(declare-var main@%_10_0 Int )
(declare-var main@%_0_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%.off.i_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@%_5_0 Int )
(declare-var main@%_6_0 Bool )
(declare-var main@%not..i_0 Bool )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%_1_0 Int )
(declare-var main@%_4_0 Bool )
(declare-var main@%..i_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@_bb1_0 Bool )
(declare-var |tuple(main@entry_0, main@_bb1_0)| Bool )
(declare-var main@%_16_0 Bool )
(declare-var main@_bb2_0 Bool )
(declare-var main@_bb3_0 Bool )
(declare-var |tuple(main@_bb1_0, main@_bb3_0)| Bool )
(declare-var main@%...i_0 Int )
(declare-var main@_bb4_0 Bool )
(declare-var main@%x.0.i_0 Int )
(declare-var main@%x.0.i_1 Int )
(declare-var main@%_26_0 Int )
(declare-var main@_bb4_1 Bool )
(declare-var main@precall_0 Bool )
(declare-var main@precall.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_bool_0 @__VERIFIER_nondet_int_0))
(rule (let ((a!1 (and (main@entry @__VERIFIER_nondet_bool_0 @__VERIFIER_nondet_int_0)
                true
                (= main@%_0_0 @__VERIFIER_nondet_int_0)
                (= main@%.off.i_0 (+ main@%_1_0 1000000))
                (= main@%_2_0
                   (ite (>= main@%.off.i_0 0) (< main@%.off.i_0 2000001) false))
                main@%_2_0
                (= main@%_3_0 @__VERIFIER_nondet_bool_0)
                (= main@%_5_0 @__VERIFIER_nondet_bool_0)
                (= main@%not..i_0 (xor main@%_4_0 true))
                (= main@%..i_0 (ite main@%not..i_0 1 0))
                (=> main@_bb_0 (and main@_bb_0 main@entry_0))
                (=> (and main@_bb_0 main@entry_0) main@%_6_0)
                (=> main@_bb_0 (= main@%_8_0 @__VERIFIER_nondet_bool_0))
                (=> main@_bb_0 (= main@%_10_0 @__VERIFIER_nondet_bool_0))
                (=> |tuple(main@entry_0, main@_bb1_0)| main@entry_0)
                (=> main@_bb1_0
                    (or (and main@_bb1_0 main@_bb_0)
                        (and main@entry_0 |tuple(main@entry_0, main@_bb1_0)|)))
                (=> (and main@entry_0 |tuple(main@entry_0, main@_bb1_0)|)
                    (not main@%_6_0))
                (=> main@_bb1_0 (= main@%_13_0 @__VERIFIER_nondet_bool_0))
                (=> main@_bb1_0 (= main@%_15_0 @__VERIFIER_nondet_bool_0))
                (=> main@_bb2_0 (and main@_bb2_0 main@_bb1_0))
                (=> (and main@_bb2_0 main@_bb1_0) main@%_14_0)
                (=> main@_bb2_0 (= main@%_18_0 @__VERIFIER_nondet_bool_0))
                (=> main@_bb2_0 (= main@%_20_0 @__VERIFIER_nondet_bool_0))
                (=> |tuple(main@_bb1_0, main@_bb3_0)| main@_bb1_0)
                (=> main@_bb3_0
                    (or (and main@_bb3_0 main@_bb2_0)
                        (and main@_bb1_0 |tuple(main@_bb1_0, main@_bb3_0)|)))
                (=> (and main@_bb1_0 |tuple(main@_bb1_0, main@_bb3_0)|)
                    (not main@%_14_0))
                (=> main@_bb3_0 (= main@%_23_0 (ite main@%_4_0 (- 1) 0)))
                (=> main@_bb3_0
                    (= main@%...i_0 (ite main@%_16_0 main@%_23_0 main@%..i_0)))
                (=> main@_bb4_0 (and main@_bb4_0 main@_bb3_0))
                main@_bb4_0
                (=> (and main@_bb4_0 main@_bb3_0) (= main@%x.0.i_0 main@%_1_0))
                (=> (and main@_bb4_0 main@_bb3_0)
                    (= main@%x.0.i_1 main@%x.0.i_0)))))
  (=> a!1 (main@_bb4 main@%x.0.i_1 main@%...i_0))))
(rule (=> (and (main@_bb4 main@%x.0.i_0 main@%...i_0)
         true
         (= main@%_25_0 (> main@%x.0.i_0 0))
         (= main@%_26_0 (- main@%x.0.i_0 main@%...i_0))
         (=> main@_bb4_1 (and main@_bb4_1 main@_bb4_0))
         main@_bb4_1
         (=> (and main@_bb4_1 main@_bb4_0) main@%_25_0)
         (=> (and main@_bb4_1 main@_bb4_0) (= main@%x.0.i_1 main@%_26_0))
         (=> (and main@_bb4_1 main@_bb4_0) (= main@%x.0.i_2 main@%x.0.i_1)))
    (main@_bb4 main@%x.0.i_2 main@%...i_0)))
(rule (=> (and (main@_bb4 main@%x.0.i_0 main@%...i_0)
         true
         (= main@%_25_0 (> main@%x.0.i_0 0))
         (= main@%_26_0 (- main@%x.0.i_0 main@%...i_0))
         (=> main@precall_0 (and main@precall_0 main@_bb4_0))
         (=> (and main@precall_0 main@_bb4_0) (not main@%_25_0))
         (=> main@precall_0 (not main@%_27_0))
         (=> main@precall_0 false)
         (=> main@precall.split_0 (and main@precall.split_0 main@precall_0))
         main@precall.split_0)
    main@precall.split))
(query main@precall.split)

