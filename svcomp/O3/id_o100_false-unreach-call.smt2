(set-info :original "/tmp/sea-v0xOzD/id_o100_false-unreach-call.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@tailrecurse.i (Int Int ))
(declare-rel main@id.exit.split ())
(declare-var main@%_5_0 Bool )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%x.tr2.i_2 Int )
(declare-var main@%accumulator.tr1.i_2 Int )
(declare-var main@%_0_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_1_0 Int )
(declare-var main@tailrecurse.i.preheader_0 Bool )
(declare-var main@tailrecurse.i_0 Bool )
(declare-var main@%x.tr2.i_0 Int )
(declare-var main@%accumulator.tr1.i_0 Int )
(declare-var main@%x.tr2.i_1 Int )
(declare-var main@%accumulator.tr1.i_1 Int )
(declare-var main@id.exit_0 Bool )
(declare-var main@%accumulator.tr.lcssa.i_0 Bool )
(declare-var main@%accumulator.tr.lcssa.i_1 Bool )
(declare-var main@id.exit.split_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Int )
(declare-var main@tailrecurse.i_1 Bool )
(declare-var main@id.exit.loopexit_0 Bool )
(declare-var main@%.lcssa_0 Int )
(declare-var main@%phitmp_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (=> main@tailrecurse.i.preheader_0
             (and main@tailrecurse.i.preheader_0 main@entry_0))
         (=> (and main@tailrecurse.i.preheader_0 main@entry_0) (not main@%_2_0))
         (=> main@tailrecurse.i_0
             (and main@tailrecurse.i_0 main@tailrecurse.i.preheader_0))
         main@tailrecurse.i_0
         (=> (and main@tailrecurse.i_0 main@tailrecurse.i.preheader_0)
             (= main@%x.tr2.i_0 main@%_1_0))
         (=> (and main@tailrecurse.i_0 main@tailrecurse.i.preheader_0)
             (= main@%accumulator.tr1.i_0 0))
         (=> (and main@tailrecurse.i_0 main@tailrecurse.i.preheader_0)
             (= main@%x.tr2.i_1 main@%x.tr2.i_0))
         (=> (and main@tailrecurse.i_0 main@tailrecurse.i.preheader_0)
             (= main@%accumulator.tr1.i_1 main@%accumulator.tr1.i_0)))
    (main@tailrecurse.i main@%x.tr2.i_1 main@%accumulator.tr1.i_1)))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (=> main@id.exit_0 (and main@id.exit_0 main@entry_0))
         (=> (and main@id.exit_0 main@entry_0) main@%_2_0)
         (=> (and main@id.exit_0 main@entry_0)
             (= main@%accumulator.tr.lcssa.i_0 false))
         (=> (and main@id.exit_0 main@entry_0)
             (= main@%accumulator.tr.lcssa.i_1 main@%accumulator.tr.lcssa.i_0))
         (=> main@id.exit_0 main@%accumulator.tr.lcssa.i_1)
         (=> main@id.exit.split_0 (and main@id.exit.split_0 main@id.exit_0))
         main@id.exit.split_0)
    main@id.exit.split))
(rule (=> (and (main@tailrecurse.i main@%x.tr2.i_0 main@%accumulator.tr1.i_0)
         true
         (= main@%_3_0 (+ main@%x.tr2.i_0 (- 1)))
         (= main@%_4_0 (+ main@%accumulator.tr1.i_0 1))
         (= main@%_5_0 (= main@%_3_0 0))
         (=> main@tailrecurse.i_1
             (and main@tailrecurse.i_1 main@tailrecurse.i_0))
         main@tailrecurse.i_1
         (=> (and main@tailrecurse.i_1 main@tailrecurse.i_0) (not main@%_5_0))
         (=> (and main@tailrecurse.i_1 main@tailrecurse.i_0)
             (= main@%x.tr2.i_1 main@%_3_0))
         (=> (and main@tailrecurse.i_1 main@tailrecurse.i_0)
             (= main@%accumulator.tr1.i_1 main@%_4_0))
         (=> (and main@tailrecurse.i_1 main@tailrecurse.i_0)
             (= main@%x.tr2.i_2 main@%x.tr2.i_1))
         (=> (and main@tailrecurse.i_1 main@tailrecurse.i_0)
             (= main@%accumulator.tr1.i_2 main@%accumulator.tr1.i_1)))
    (main@tailrecurse.i main@%x.tr2.i_2 main@%accumulator.tr1.i_2)))
(rule (let ((a!1 (and (main@tailrecurse.i main@%x.tr2.i_0 main@%accumulator.tr1.i_0)
                true
                (= main@%_3_0 (+ main@%x.tr2.i_0 (- 1)))
                (= main@%_4_0 (+ main@%accumulator.tr1.i_0 1))
                (= main@%_5_0 (= main@%_3_0 0))
                (=> main@id.exit.loopexit_0
                    (and main@id.exit.loopexit_0 main@tailrecurse.i_0))
                (=> (and main@id.exit.loopexit_0 main@tailrecurse.i_0)
                    main@%_5_0)
                (=> (and main@id.exit.loopexit_0 main@tailrecurse.i_0)
                    (= main@%.lcssa_0 main@%_4_0))
                (=> (and main@id.exit.loopexit_0 main@tailrecurse.i_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                (=> main@id.exit.loopexit_0
                    (= main@%phitmp_0 (= main@%.lcssa_1 100)))
                (=> main@id.exit_0 (and main@id.exit_0 main@id.exit.loopexit_0))
                (=> (and main@id.exit_0 main@id.exit.loopexit_0)
                    (= main@%accumulator.tr.lcssa.i_0 main@%phitmp_0))
                (=> (and main@id.exit_0 main@id.exit.loopexit_0)
                    (= main@%accumulator.tr.lcssa.i_1
                       main@%accumulator.tr.lcssa.i_0))
                (=> main@id.exit_0 main@%accumulator.tr.lcssa.i_1)
                (=> main@id.exit.split_0
                    (and main@id.exit.split_0 main@id.exit_0))
                main@id.exit.split_0)))
  (=> a!1 main@id.exit.split)))
(query main@id.exit.split)

