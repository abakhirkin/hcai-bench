(set-info :original "/tmp/sea-QSBMjU/trex02_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int (Array Int Int) Int ))
(declare-rel main@.lr.ph (Int (Array Int Int) Int ))
(declare-rel main@orig.main.exit.split ())
(declare-var main@%_12_0 Bool )
(declare-var main@%_13_0 Bool )
(declare-var main@%_14_0 Bool )
(declare-var main@%_6_0 Int )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@%_8_0 Int )
(declare-var main@%_11_0 Bool )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%shadow.mem.0_2 (Array Int Int) )
(declare-var main@%_0_0 (Array Int Int) )
(declare-var main@%_1_0 (Array Int Int) )
(declare-var main@%_2_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%_5_0 Bool )
(declare-var main@%shadow.mem.1_1 (Array Int Int) )
(declare-var main@entry_0 Bool )
(declare-var @x_0 Int )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 (Array Int Int) )
(declare-var main@.lr.ph.preheader_0 Bool )
(declare-var main@.lr.ph_0 Bool )
(declare-var main@%shadow.mem.0_0 (Array Int Int) )
(declare-var main@%shadow.mem.0_1 (Array Int Int) )
(declare-var main@orig.main.exit_0 Bool )
(declare-var main@%shadow.mem.1_0 (Array Int Int) )
(declare-var main@%storemerge.lcssa_0 Int )
(declare-var main@%storemerge.lcssa_1 Int )
(declare-var main@orig.main.exit.split_0 Bool )
(declare-var main@%_9_0 Int )
(declare-var main@%_10_0 (Array Int Int) )
(declare-var main@.lr.ph_1 Bool )
(declare-var main@orig.main.exit.loopexit_0 Bool )
(declare-var main@%.lcssa_0 Int )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_bool_0 main@%_0_0 @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_bool_0
                     main@%_0_0
                     @__VERIFIER_nondet_int_0)
         true
         (= main@%_1_0 (store main@%_0_0 @x_0 0))
         (= main@%_2_0 @__VERIFIER_nondet_int_0)
         (= main@%_4_0 (store main@%_1_0 @x_0 main@%_3_0))
         (= main@%_5_0 (> main@%_3_0 0))
         (=> main@.lr.ph.preheader_0 (and main@.lr.ph.preheader_0 main@entry_0))
         (=> (and main@.lr.ph.preheader_0 main@entry_0) main@%_5_0)
         (=> main@.lr.ph_0 (and main@.lr.ph_0 main@.lr.ph.preheader_0))
         main@.lr.ph_0
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%shadow.mem.0_0 main@%_4_0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%shadow.mem.0_1 main@%shadow.mem.0_0)))
    (main@.lr.ph @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_1 @x_0)))
(rule (let ((a!1 (and (main@entry @__VERIFIER_nondet_bool_0
                            main@%_0_0
                            @__VERIFIER_nondet_int_0)
                true
                (= main@%_1_0 (store main@%_0_0 @x_0 0))
                (= main@%_2_0 @__VERIFIER_nondet_int_0)
                (= main@%_4_0 (store main@%_1_0 @x_0 main@%_3_0))
                (= main@%_5_0 (> main@%_3_0 0))
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@entry_0))
                (=> (and main@orig.main.exit_0 main@entry_0) (not main@%_5_0))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%shadow.mem.1_0 main@%_4_0))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%storemerge.lcssa_0 main@%_3_0))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%shadow.mem.1_1 main@%shadow.mem.1_0))
                (=> (and main@orig.main.exit_0 main@entry_0)
                    (= main@%storemerge.lcssa_1 main@%storemerge.lcssa_0))
                (=> main@orig.main.exit_0
                    (= main@%_12_0 (= main@%storemerge.lcssa_1 0)))
                (=> main@orig.main.exit_0 (not main@%_13_0))
                (=> main@orig.main.exit_0 (= main@%_14_0 (= main@%_12_0 false)))
                (=> main@orig.main.exit_0 main@%_14_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!1 main@orig.main.exit.split)))
(rule (=> (and (main@.lr.ph @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_0 @x_0)
         true
         (= main@%_6_0 @__VERIFIER_nondet_bool_0)
         (= main@%_8_0 (select main@%shadow.mem.0_0 @x_0))
         (= main@%_9_0 (+ main@%_8_0 (- 1)))
         (= main@%_10_0 (store main@%shadow.mem.0_0 @x_0 main@%_9_0))
         (= main@%_11_0 (> main@%_8_0 1))
         (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
         main@.lr.ph_1
         (=> (and main@.lr.ph_1 main@.lr.ph_0) main@%_11_0)
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%shadow.mem.0_1 main@%_10_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%shadow.mem.0_2 main@%shadow.mem.0_1)))
    (main@.lr.ph @__VERIFIER_nondet_bool_0 main@%shadow.mem.0_2 @x_0)))
(rule (let ((a!1 (and (main@.lr.ph @__VERIFIER_nondet_bool_0
                             main@%shadow.mem.0_0
                             @x_0)
                true
                (= main@%_6_0 @__VERIFIER_nondet_bool_0)
                (= main@%_8_0 (select main@%shadow.mem.0_0 @x_0))
                (= main@%_9_0 (+ main@%_8_0 (- 1)))
                (= main@%_10_0 (store main@%shadow.mem.0_0 @x_0 main@%_9_0))
                (= main@%_11_0 (> main@%_8_0 1))
                (=> main@orig.main.exit.loopexit_0
                    (and main@orig.main.exit.loopexit_0 main@.lr.ph_0))
                (=> (and main@orig.main.exit.loopexit_0 main@.lr.ph_0)
                    (not main@%_11_0))
                (=> (and main@orig.main.exit.loopexit_0 main@.lr.ph_0)
                    (= main@%.lcssa_0 main@%_9_0))
                (=> (and main@orig.main.exit.loopexit_0 main@.lr.ph_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@orig.main.exit.loopexit_0))
                (=> (and main@orig.main.exit_0 main@orig.main.exit.loopexit_0)
                    (= main@%shadow.mem.1_0 main@%_10_0))
                (=> (and main@orig.main.exit_0 main@orig.main.exit.loopexit_0)
                    (= main@%storemerge.lcssa_0 main@%.lcssa_1))
                (=> (and main@orig.main.exit_0 main@orig.main.exit.loopexit_0)
                    (= main@%shadow.mem.1_1 main@%shadow.mem.1_0))
                (=> (and main@orig.main.exit_0 main@orig.main.exit.loopexit_0)
                    (= main@%storemerge.lcssa_1 main@%storemerge.lcssa_0))
                (=> main@orig.main.exit_0
                    (= main@%_12_0 (= main@%storemerge.lcssa_1 0)))
                (=> main@orig.main.exit_0 (not main@%_13_0))
                (=> main@orig.main.exit_0 (= main@%_14_0 (= main@%_12_0 false)))
                (=> main@orig.main.exit_0 main@%_14_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!1 main@orig.main.exit.split)))
(query main@orig.main.exit.split)

