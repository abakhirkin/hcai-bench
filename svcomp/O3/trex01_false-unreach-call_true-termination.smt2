(set-info :original "/tmp/sea-TRMPCa/trex01_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int Int ))
(declare-rel main@.lr.ph (Int Int ))
(declare-rel main@precall5.split ())
(declare-var main@%_12_0 Bool )
(declare-var main@%_13_0 Bool )
(declare-var main@%_11_0 Bool )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%z.0.i1_2 Int )
(declare-var main@%_0_0 Int )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@%_5_0 Int )
(declare-var main@%_7_0 Int )
(declare-var main@%_9_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%_8_0 Int )
(declare-var main@.lr.ph.preheader_0 Bool )
(declare-var main@.lr.ph_0 Bool )
(declare-var main@%z.0.i1_0 Int )
(declare-var main@%z.0.i1_1 Int )
(declare-var main@precall5_0 Bool )
(declare-var main@%z.0.i.lcssa_0 Bool )
(declare-var main@%z.0.i.lcssa_1 Bool )
(declare-var main@precall5.split_0 Bool )
(declare-var main@%_10_0 Int )
(declare-var main@.lr.ph_1 Bool )
(declare-var main@.precall5_crit_edge_0 Bool )
(declare-var main@%.lcssa_0 Int )
(declare-var main@%phitmp_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_bool_0 @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_bool_0 @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_bool_0)
         (not main@%_2_0)
         (= main@%_3_0 @__VERIFIER_nondet_int_0)
         (= main@%_5_0 @__VERIFIER_nondet_int_0)
         (= main@%_7_0 @__VERIFIER_nondet_int_0)
         (= main@%_9_0 (> main@%_8_0 1))
         (=> main@.lr.ph.preheader_0 (and main@.lr.ph.preheader_0 main@entry_0))
         (=> (and main@.lr.ph.preheader_0 main@entry_0) main@%_9_0)
         (=> main@.lr.ph_0 (and main@.lr.ph_0 main@.lr.ph.preheader_0))
         main@.lr.ph_0
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%z.0.i1_0 1))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%z.0.i1_1 main@%z.0.i1_0)))
    (main@.lr.ph main@%z.0.i1_1 main@%_8_0)))
(rule (let ((a!1 (and (main@entry @__VERIFIER_nondet_bool_0 @__VERIFIER_nondet_int_0)
                true
                (= main@%_0_0 @__VERIFIER_nondet_bool_0)
                (not main@%_2_0)
                (= main@%_3_0 @__VERIFIER_nondet_int_0)
                (= main@%_5_0 @__VERIFIER_nondet_int_0)
                (= main@%_7_0 @__VERIFIER_nondet_int_0)
                (= main@%_9_0 (> main@%_8_0 1))
                (=> main@precall5_0 (and main@precall5_0 main@entry_0))
                (=> (and main@precall5_0 main@entry_0) (not main@%_9_0))
                (=> (and main@precall5_0 main@entry_0)
                    (= main@%z.0.i.lcssa_0 false))
                (=> (and main@precall5_0 main@entry_0)
                    (= main@%z.0.i.lcssa_1 main@%z.0.i.lcssa_0))
                (=> main@precall5_0 (not main@%_12_0))
                (=> main@precall5_0
                    (= main@%_13_0 (= main@%z.0.i.lcssa_1 false)))
                (=> main@precall5_0 main@%_13_0)
                (=> main@precall5.split_0
                    (and main@precall5.split_0 main@precall5_0))
                main@precall5.split_0)))
  (=> a!1 main@precall5.split)))
(rule (=> (and (main@.lr.ph main@%z.0.i1_0 main@%_8_0)
         true
         (= main@%_10_0 (* main@%z.0.i1_0 2))
         (= main@%_11_0 (< main@%_10_0 main@%_8_0))
         (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
         main@.lr.ph_1
         (=> (and main@.lr.ph_1 main@.lr.ph_0) main@%_11_0)
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%z.0.i1_1 main@%_10_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%z.0.i1_2 main@%z.0.i1_1)))
    (main@.lr.ph main@%z.0.i1_2 main@%_8_0)))
(rule (let ((a!1 (and (main@.lr.ph main@%z.0.i1_0 main@%_8_0)
                true
                (= main@%_10_0 (* main@%z.0.i1_0 2))
                (= main@%_11_0 (< main@%_10_0 main@%_8_0))
                (=> main@.precall5_crit_edge_0
                    (and main@.precall5_crit_edge_0 main@.lr.ph_0))
                (=> (and main@.precall5_crit_edge_0 main@.lr.ph_0)
                    (not main@%_11_0))
                (=> (and main@.precall5_crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_0 main@%_10_0))
                (=> (and main@.precall5_crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                (=> main@.precall5_crit_edge_0
                    (= main@%phitmp_0 (> main@%.lcssa_1 1)))
                (=> main@precall5_0
                    (and main@precall5_0 main@.precall5_crit_edge_0))
                (=> (and main@precall5_0 main@.precall5_crit_edge_0)
                    (= main@%z.0.i.lcssa_0 main@%phitmp_0))
                (=> (and main@precall5_0 main@.precall5_crit_edge_0)
                    (= main@%z.0.i.lcssa_1 main@%z.0.i.lcssa_0))
                (=> main@precall5_0 (not main@%_12_0))
                (=> main@precall5_0
                    (= main@%_13_0 (= main@%z.0.i.lcssa_1 false)))
                (=> main@precall5_0 main@%_13_0)
                (=> main@precall5.split_0
                    (and main@precall5.split_0 main@precall5_0))
                main@precall5.split_0)))
  (=> a!1 main@precall5.split)))
(query main@precall5.split)

