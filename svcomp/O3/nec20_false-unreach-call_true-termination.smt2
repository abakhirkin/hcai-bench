(set-info :original "/tmp/sea-EKtd_D/nec20_false-unreach-call_true-termination.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@_bb (Int Int Int ))
(declare-rel main@orig.main.exit.split ())
(declare-var main@%_7_0 Bool )
(declare-var main@%_8_0 Bool )
(declare-var main@%_9_0 Bool )
(declare-var main@%_6_0 Bool )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%_1_0 Int )
(declare-var @__VERIFIER_nondet_bool_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var main@%j.0.i2_2 Int )
(declare-var main@%i.0.i1_2 Int )
(declare-var main@entry_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%..i_0 Int )
(declare-var main@_bb_0 Bool )
(declare-var main@%j.0.i2_0 Int )
(declare-var main@%i.0.i1_0 Int )
(declare-var main@%j.0.i2_1 Int )
(declare-var main@%i.0.i1_1 Int )
(declare-var main@%_4_0 Int )
(declare-var main@%_5_0 Int )
(declare-var main@_bb_1 Bool )
(declare-var main@orig.main.exit_0 Bool )
(declare-var main@%.lcssa_0 Int )
(declare-var main@orig.main.exit.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_bool_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_bool_0)
         true
         (= main@%_1_0 @__VERIFIER_nondet_bool_0)
         (= main@%..i_0 (ite main@%_2_0 0 1023))
         (=> main@_bb_0 (and main@_bb_0 main@entry_0))
         main@_bb_0
         (=> (and main@_bb_0 main@entry_0) (= main@%j.0.i2_0 main@%_0_0))
         (=> (and main@_bb_0 main@entry_0) (= main@%i.0.i1_0 0))
         (=> (and main@_bb_0 main@entry_0) (= main@%j.0.i2_1 main@%j.0.i2_0))
         (=> (and main@_bb_0 main@entry_0) (= main@%i.0.i1_1 main@%i.0.i1_0)))
    (main@_bb main@%i.0.i1_1 main@%j.0.i2_1 main@%..i_0)))
(rule (=> (and (main@_bb main@%i.0.i1_0 main@%j.0.i2_0 main@%..i_0)
         true
         (= main@%_4_0 (+ main@%i.0.i1_0 1))
         (= main@%_5_0 (+ main@%j.0.i2_0 2))
         (= main@%_6_0 (< main@%i.0.i1_0 main@%..i_0))
         (=> main@_bb_1 (and main@_bb_1 main@_bb_0))
         main@_bb_1
         (=> (and main@_bb_1 main@_bb_0) main@%_6_0)
         (=> (and main@_bb_1 main@_bb_0) (= main@%j.0.i2_1 main@%_5_0))
         (=> (and main@_bb_1 main@_bb_0) (= main@%i.0.i1_1 main@%_4_0))
         (=> (and main@_bb_1 main@_bb_0) (= main@%j.0.i2_2 main@%j.0.i2_1))
         (=> (and main@_bb_1 main@_bb_0) (= main@%i.0.i1_2 main@%i.0.i1_1)))
    (main@_bb main@%i.0.i1_2 main@%j.0.i2_2 main@%..i_0)))
(rule (let ((a!1 (and (main@_bb main@%i.0.i1_0 main@%j.0.i2_0 main@%..i_0)
                true
                (= main@%_4_0 (+ main@%i.0.i1_0 1))
                (= main@%_5_0 (+ main@%j.0.i2_0 2))
                (= main@%_6_0 (< main@%i.0.i1_0 main@%..i_0))
                (=> main@orig.main.exit_0
                    (and main@orig.main.exit_0 main@_bb_0))
                (=> (and main@orig.main.exit_0 main@_bb_0) (not main@%_6_0))
                (=> (and main@orig.main.exit_0 main@_bb_0)
                    (= main@%.lcssa_0 main@%_5_0))
                (=> (and main@orig.main.exit_0 main@_bb_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                (=> main@orig.main.exit_0
                    (= main@%_7_0 (< main@%.lcssa_1 1025)))
                (=> main@orig.main.exit_0 (not main@%_8_0))
                (=> main@orig.main.exit_0 (= main@%_9_0 (= main@%_7_0 false)))
                (=> main@orig.main.exit_0 main@%_9_0)
                (=> main@orig.main.exit.split_0
                    (and main@orig.main.exit.split_0 main@orig.main.exit_0))
                main@orig.main.exit.split_0)))
  (=> a!1 main@orig.main.exit.split)))
(query main@orig.main.exit.split)

